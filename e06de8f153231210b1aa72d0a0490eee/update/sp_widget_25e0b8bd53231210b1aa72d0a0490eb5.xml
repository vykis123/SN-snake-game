<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller = function ($rootScope) {
  let c = this;
  const BLOCK_SIZE = 24;
  const ROWS = 20;
  const COLLUMS = 20;
  let context;
  let snakeX = BLOCK_SIZE * 5;
  let snakeY = BLOCK_SIZE * 5;
  let snakeVelocityX = 0;
  let snakeVelocityY = 0;
  let snakeBody = [];
  let foodX;
  let foodY;
  let gameOver = false;
  let gameScore = 0;
  const gameBoard = document.getElementById("board");
  const dialog = document.getElementById("dialog");

  /**Game initial static data */
  gameBoard.height = ROWS * BLOCK_SIZE;
  gameBoard.width = COLLUMS * BLOCK_SIZE;
  context = gameBoard.getContext("2d");
  shareScoreData();
  placeSnakeFood();
  document.addEventListener("keyup", changeSnakeDirection);
  setInterval(game, 1000 / 10);

  /**
   * Reset game when game over, pop up is visible and user clicks ECP to close modal
   */
  document.addEventListener("keyup", handleEscClick);

  function game() {
    if (gameOver) return;

    /**Cases to when snake reaches end of wall */
    if (snakeX < 0) {
      snakeX = gameBoard.width;
    } else if (snakeX > COLLUMS * BLOCK_SIZE) {
      snakeX = 0;
    } else if (snakeY < 0) {
      snakeY = gameBoard.height;
    } else if (snakeY > ROWS * BLOCK_SIZE) {
      snakeY = 0;
    }

    /**Paint board */
    context.fillStyle = "#12130f";
    context.fillRect(0, 0, gameBoard.width, gameBoard.height);

    /**Add food */
    context.beginPath();
    context.roundRect(foodX, foodY, BLOCK_SIZE, BLOCK_SIZE, 40);
    context.fillStyle = "#d21919";
    context.fill();

    /**Check if snake eats food */
    checkIfFoodEaten();

    /**Grow snake body */
    for (let i = snakeBody.length - 1; i > 0; i--) {
      snakeBody[i] = snakeBody[i - 1];
    }
    if (snakeBody.length) {
      snakeBody[0] = [snakeX, snakeY];
    }

    /**Control snake movement and placing */
    placeSnake();

    for (let i = 0; i < snakeBody.length; i++) {
      context.beginPath();
      context.roundRect(
        snakeBody[i][0],
        snakeBody[i][1],
        BLOCK_SIZE,
        BLOCK_SIZE,
        2
      );
      context.fillStyle = "#1db91d";
      context.fill();
    }

    /**Game End  */
    for (let i = 0; i < snakeBody.length; i++) {
      if (snakeX === snakeBody[i][0] && snakeY === snakeBody[i][1]) {
        gameOver = true;
        dialog.showModal();
        insertGameResult(gameScore);
      }
    }
  }

  function placeSnake() {
    snakeX += snakeVelocityX * BLOCK_SIZE;
    snakeY += snakeVelocityY * BLOCK_SIZE;

    context.beginPath();
    context.roundRect(snakeX, snakeY, BLOCK_SIZE, BLOCK_SIZE, 5);
    context.fillStyle = "#1db91d";
    context.fill();
  }

  function checkIfFoodEaten() {
    if (foodX === snakeX && foodY === snakeY) {
      gameScore += 5;
      shareScoreData();
      snakeBody.push([foodX, foodY]);
      placeSnakeFood();
    }
  }

  function placeSnakeFood() {
    foodX = Math.floor(Math.random() * COLLUMS) * BLOCK_SIZE;
    foodY = Math.floor(Math.random() * ROWS) * BLOCK_SIZE;
  }

  /**
   *
   * @param {KeyboardEvent} event
   */
  function changeSnakeDirection(event) {
    if (event.code === "ArrowUp" && snakeVelocityY !== -1) {
      snakeVelocityX = 0;
      snakeVelocityY = -1;
      return;
    }
    if (event.code === "ArrowDown" && snakeVelocityY !== -1) {
      snakeVelocityX = 0;
      snakeVelocityY = 1;
      return;
    }
    if (event.code === "ArrowLeft" && snakeVelocityX !== 1) {
      snakeVelocityX = -1;
      snakeVelocityY = 0;
      return;
    }
    if (event.code === "ArrowRight" && snakeVelocityX !== -1) {
      snakeVelocityX = 1;
      snakeVelocityY = 0;
      return;
    }
  }

  /**
   * Share data with listening widgets for gameScore update
   */
  function shareScoreData() {
    $rootScope.$broadcast("gameScore", gameScore);
  }

  function resetGame() {
    gameScore = 0;
    snakeVelocityX = 0;
    snakeVelocityY = 0;
    snakeBody = [];
    gameOver = false;
    shareScoreData();
    placeSnakeFood();
    placeSnake();
  }

  /**
   * Reset game when recieve event update from pop widget
   */
  $rootScope.$on("gameReset", function (event, data) {
    resetGame();
    dialog.close();
  });

  /**
   * Insert game result on game end into snake game table
   *
   * @param {number} gameResult
   */
  function insertGameResult(gameResult) {
    const serverRequest = {};
    serverRequest.action = "gameEnd";
    serverRequest.score = gameResult;
    c.server
      .get(serverRequest)
      .then(function (response) {
        const { message, status } = response.data.insertResponse;

        if (status === "failed")
          throw new Error(`Issue inserting record ${message}.`);
      })
      .catch((error) => {
        console.error("Something went wrong with insertGameResult: " + error);
      });
  }

  /**
   *@param {KeyboardEvent} event
   */
  function handleEscClick(event) {
    if (event.key === "Escape" && gameOver) {
      resetGame();
      dialog.close();

      document.removeEventListener("click", handleEscClick);
    }
  }
};
]]></client_script>
        <controller_as>c</controller_as>
        <css>.game {&#13;
  display: grid;&#13;
  place-items: center;&#13;
}&#13;
&#13;
dialog {&#13;
  display: none;&#13;
  opacity: 0;&#13;
  margin: auto;&#13;
  border: none;&#13;
  padding: 1rem 2rem;&#13;
  border-radius: 1rem;&#13;
  box-shadow: 0 0 1rem rgba(0, 0, 0, 0.712);&#13;
  background: linear-gradient(90deg, #87ec87, #1db91d);&#13;
&#13;
  /*Works in 75% browsers*/&#13;
  translate: 0 25vh;&#13;
  transition-property: overlay display opacity;&#13;
  transition-duration: 0.5s;&#13;
  transition-behavior: allow-discrete;&#13;
&#13;
  &amp;[open] {&#13;
    opacity: 1;&#13;
    display: block;&#13;
    translate: 0 0;&#13;
&#13;
    //   /*Works in 75% browsers*/&#13;
    @starting-style {&#13;
      opacity: 0;&#13;
      translate: 0 -25vh;&#13;
    }&#13;
&#13;
    &amp;::backdrop {&#13;
      background: rgba(30, 75, 28, 0.226);&#13;
      backdrop-filter: blur(0.5rem);&#13;
      -webkit-backdrop-filter: blur(0.5rem);&#13;
    }&#13;
  }&#13;
}&#13;
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>snake_game</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>Snake game</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function () {
  data.currentUser = gs.getUserDisplayName() || "Guest";
  const SNAKE_GAME_TABLE = "x_872084_snake_gam_x_872084_snake_game_res";
  const GUEST_SYS_ID = "5136503cc611227c0183e96598c4f706";

  if (input && input.action === "gameEnd") {
    const { score } = input;
    const snakeGr = new GlideRecord(SNAKE_GAME_TABLE);
    snakeGr.initialize();
    snakeGr.setValue("player", gs.getUserID() || GUEST_SYS_ID);
    snakeGr.setValue("score", score);
    const recordSySid = snakeGr.insert();

    if (!recordSySid) {
      return (data.insertResponse = {
        status: "failed",
        message: "Record was not created",
      });
    }

    return (data.insertResponse = {
      status: "success",
      message: `Record was created ${recordSySid}`,
    });
  }
})();
]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2025-02-06 14:21:36</sys_created_on>
        <sys_id>25e0b8bd53231210b1aa72d0a0490eb5</sys_id>
        <sys_mod_count>169</sys_mod_count>
        <sys_name>Snake game</sys_name>
        <sys_package display_value="Snake Game" source="x_872084_snake_gam">e06de8f153231210b1aa72d0a0490eee</sys_package>
        <sys_policy/>
        <sys_scope display_value="Snake Game">e06de8f153231210b1aa72d0a0490eee</sys_scope>
        <sys_update_name>sp_widget_25e0b8bd53231210b1aa72d0a0490eb5</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-02-21 09:17:24</sys_updated_on>
        <template><![CDATA[<div class="game">
  <dialog id="dialog">
    <widget id="snake_game_end_pop"></widget>
  </dialog>
  <canvas id="board"></canvas>
</div>
]]></template>
    </sp_widget>
</record_update>
